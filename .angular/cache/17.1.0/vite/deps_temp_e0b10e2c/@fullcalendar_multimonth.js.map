{
  "version": 3,
  "sources": ["../../../../../node_modules/@fullcalendar/multimonth/index.js"],
  "sourcesContent": ["import { createPlugin } from '@fullcalendar/core/index.js';\nimport { buildDayTableModel, DayTableSlicer, TableRows, buildDayTableRenderRange, TableDateProfileGenerator } from '@fullcalendar/daygrid/internal.js';\nimport { DateComponent, memoize, getUniqueDomId, DayHeader, ViewContainer, formatIsoMonthStr, isPropsEqual, createDuration, intersectRanges, createFormatter, injectStyles } from '@fullcalendar/core/internal.js';\nimport { createElement, createRef } from '@fullcalendar/core/preact.js';\n\nclass SingleMonth extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.buildDayTableModel = memoize(buildDayTableModel);\n        this.slicer = new DayTableSlicer();\n        this.state = {\n            labelId: getUniqueDomId(),\n        };\n    }\n    render() {\n        const { props, state, context } = this;\n        const { dateProfile, forPrint } = props;\n        const { options } = context;\n        const dayTableModel = this.buildDayTableModel(dateProfile, context.dateProfileGenerator);\n        const slicedProps = this.slicer.sliceProps(props, dateProfile, options.nextDayThreshold, context, dayTableModel);\n        // ensure single-month has aspect ratio\n        const tableHeight = props.tableWidth != null ? props.tableWidth / options.aspectRatio : null;\n        const rowCnt = dayTableModel.cells.length;\n        const rowHeight = tableHeight != null ? tableHeight / rowCnt : null;\n        return (createElement(\"div\", { ref: props.elRef, \"data-date\": props.isoDateStr, className: \"fc-multimonth-month\", style: { width: props.width }, role: \"grid\", \"aria-labelledby\": state.labelId },\n            createElement(\"div\", { className: \"fc-multimonth-header\", style: { marginBottom: rowHeight }, role: \"presentation\" },\n                createElement(\"div\", { className: \"fc-multimonth-title\", id: state.labelId }, context.dateEnv.format(props.dateProfile.currentRange.start, props.titleFormat)),\n                createElement(\"table\", { className: [\n                        'fc-multimonth-header-table',\n                        context.theme.getClass('table'),\n                    ].join(' '), role: \"presentation\" },\n                    createElement(\"thead\", { role: \"rowgroup\" },\n                        createElement(DayHeader, { dateProfile: props.dateProfile, dates: dayTableModel.headerDates, datesRepDistinctDays: false })))),\n            createElement(\"div\", { className: [\n                    'fc-multimonth-daygrid',\n                    'fc-daygrid',\n                    'fc-daygrid-body',\n                    !forPrint && 'fc-daygrid-body-balanced',\n                    forPrint && 'fc-daygrid-body-unbalanced',\n                    forPrint && 'fc-daygrid-body-natural',\n                ].join(' '), style: { marginTop: -rowHeight } },\n                createElement(\"table\", { className: [\n                        'fc-multimonth-daygrid-table',\n                        context.theme.getClass('table'),\n                    ].join(' '), style: { height: forPrint ? '' : tableHeight }, role: \"presentation\" },\n                    createElement(\"tbody\", { role: \"rowgroup\" },\n                        createElement(TableRows, Object.assign({}, slicedProps, { dateProfile: dateProfile, cells: dayTableModel.cells, eventSelection: props.eventSelection, dayMaxEvents: !forPrint, dayMaxEventRows: !forPrint, showWeekNumbers: options.weekNumbers, clientWidth: props.clientWidth, clientHeight: props.clientHeight, forPrint: forPrint })))))));\n    }\n}\n\nclass MultiMonthView extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.splitDateProfileByMonth = memoize(splitDateProfileByMonth);\n        this.buildMonthFormat = memoize(buildMonthFormat);\n        this.scrollElRef = createRef();\n        this.firstMonthElRef = createRef();\n        this.needsScrollReset = false;\n        this.handleSizing = (isForced) => {\n            if (isForced) {\n                this.updateSize();\n            }\n        };\n    }\n    render() {\n        const { context, props, state } = this;\n        const { options } = context;\n        const { clientWidth, clientHeight } = state;\n        const monthHPadding = state.monthHPadding || 0;\n        const colCount = Math.min(clientWidth != null ?\n            Math.floor(clientWidth / (options.multiMonthMinWidth + monthHPadding)) :\n            1, options.multiMonthMaxColumns) || 1;\n        const monthWidthPct = (100 / colCount) + '%';\n        const monthTableWidth = clientWidth == null ? null :\n            (clientWidth / colCount) - monthHPadding;\n        const isLegitSingleCol = clientWidth != null && colCount === 1;\n        const monthDateProfiles = this.splitDateProfileByMonth(context.dateProfileGenerator, props.dateProfile, context.dateEnv, isLegitSingleCol ? false : options.fixedWeekCount, options.showNonCurrentDates);\n        const monthTitleFormat = this.buildMonthFormat(options.multiMonthTitleFormat, monthDateProfiles);\n        const rootClassNames = [\n            'fc-multimonth',\n            isLegitSingleCol ?\n                'fc-multimonth-singlecol' :\n                'fc-multimonth-multicol',\n            (monthTableWidth != null && monthTableWidth < 400) ?\n                'fc-multimonth-compact' :\n                '',\n        ];\n        return (createElement(ViewContainer, { elRef: this.scrollElRef, elClasses: rootClassNames, viewSpec: context.viewSpec }, monthDateProfiles.map((monthDateProfile, i) => {\n            const monthStr = formatIsoMonthStr(monthDateProfile.currentRange.start);\n            return (createElement(SingleMonth, Object.assign({}, props, { key: monthStr, isoDateStr: monthStr, elRef: i === 0 ? this.firstMonthElRef : undefined, titleFormat: monthTitleFormat, dateProfile: monthDateProfile, width: monthWidthPct, tableWidth: monthTableWidth, clientWidth: clientWidth, clientHeight: clientHeight })));\n        })));\n    }\n    componentDidMount() {\n        this.updateSize();\n        this.context.addResizeHandler(this.handleSizing);\n        this.requestScrollReset();\n    }\n    componentDidUpdate(prevProps) {\n        if (!isPropsEqual(prevProps, this.props)) { // an external change?\n            this.handleSizing(false);\n        }\n        if (prevProps.dateProfile !== this.props.dateProfile) {\n            this.requestScrollReset();\n        }\n        else {\n            this.flushScrollReset();\n        }\n    }\n    componentWillUnmount() {\n        this.context.removeResizeHandler(this.handleSizing);\n    }\n    updateSize() {\n        const scrollEl = this.scrollElRef.current;\n        const firstMonthEl = this.firstMonthElRef.current;\n        if (scrollEl) {\n            this.setState({\n                clientWidth: scrollEl.clientWidth,\n                clientHeight: scrollEl.clientHeight,\n            });\n        }\n        if (firstMonthEl && scrollEl) {\n            if (this.state.monthHPadding == null) { // always remember initial non-zero value\n                this.setState({\n                    monthHPadding: scrollEl.clientWidth - // go within padding\n                        firstMonthEl.firstChild.offsetWidth,\n                });\n            }\n        }\n    }\n    requestScrollReset() {\n        this.needsScrollReset = true;\n        this.flushScrollReset();\n    }\n    flushScrollReset() {\n        if (this.needsScrollReset &&\n            this.state.monthHPadding != null // indicates sizing already happened\n        ) {\n            const { currentDate } = this.props.dateProfile;\n            const scrollEl = this.scrollElRef.current;\n            const monthEl = scrollEl.querySelector(`[data-date=\"${formatIsoMonthStr(currentDate)}\"]`);\n            scrollEl.scrollTop = monthEl.getBoundingClientRect().top -\n                this.firstMonthElRef.current.getBoundingClientRect().top;\n            this.needsScrollReset = false;\n        }\n    }\n    // workaround for when queued setState render (w/ clientWidth) gets cancelled because\n    // subsequent update and shouldComponentUpdate says not to render :(\n    shouldComponentUpdate() {\n        return true;\n    }\n}\n// date profile\n// -------------------------------------------------------------------------------------------------\nconst oneMonthDuration = createDuration(1, 'month');\nfunction splitDateProfileByMonth(dateProfileGenerator, dateProfile, dateEnv, fixedWeekCount, showNonCurrentDates) {\n    const { start, end } = dateProfile.currentRange;\n    let monthStart = start;\n    const monthDateProfiles = [];\n    while (monthStart.valueOf() < end.valueOf()) {\n        const monthEnd = dateEnv.add(monthStart, oneMonthDuration);\n        const currentRange = {\n            // yuck\n            start: dateProfileGenerator.skipHiddenDays(monthStart),\n            end: dateProfileGenerator.skipHiddenDays(monthEnd, -1, true),\n        };\n        let renderRange = buildDayTableRenderRange({\n            currentRange,\n            snapToWeek: true,\n            fixedWeekCount,\n            dateEnv,\n        });\n        renderRange = {\n            // yuck\n            start: dateProfileGenerator.skipHiddenDays(renderRange.start),\n            end: dateProfileGenerator.skipHiddenDays(renderRange.end, -1, true),\n        };\n        const activeRange = dateProfile.activeRange ?\n            intersectRanges(dateProfile.activeRange, showNonCurrentDates ? renderRange : currentRange) :\n            null;\n        monthDateProfiles.push({\n            currentDate: dateProfile.currentDate,\n            isValid: dateProfile.isValid,\n            validRange: dateProfile.validRange,\n            renderRange,\n            activeRange,\n            currentRange,\n            currentRangeUnit: 'month',\n            isRangeAllDay: true,\n            dateIncrement: dateProfile.dateIncrement,\n            slotMinTime: dateProfile.slotMaxTime,\n            slotMaxTime: dateProfile.slotMinTime,\n        });\n        monthStart = monthEnd;\n    }\n    return monthDateProfiles;\n}\n// date formatting\n// -------------------------------------------------------------------------------------------------\nconst YEAR_MONTH_FORMATTER = createFormatter({ year: 'numeric', month: 'long' });\nconst YEAR_FORMATTER = createFormatter({ month: 'long' });\nfunction buildMonthFormat(formatOverride, monthDateProfiles) {\n    return formatOverride ||\n        ((monthDateProfiles[0].currentRange.start.getUTCFullYear() !==\n            monthDateProfiles[monthDateProfiles.length - 1].currentRange.start.getUTCFullYear())\n            ? YEAR_MONTH_FORMATTER\n            : YEAR_FORMATTER);\n}\n\nconst OPTION_REFINERS = {\n    multiMonthTitleFormat: createFormatter,\n    multiMonthMaxColumns: Number,\n    multiMonthMinWidth: Number,\n};\n\nvar css_248z = \".fc .fc-multimonth{border:1px solid var(--fc-border-color);display:flex;flex-wrap:wrap;overflow-x:hidden;overflow-y:auto}.fc .fc-multimonth-title{font-size:1.2em;font-weight:700;padding:1em 0;text-align:center}.fc .fc-multimonth-daygrid{background:var(--fc-page-bg-color)}.fc .fc-multimonth-daygrid-table,.fc .fc-multimonth-header-table{table-layout:fixed;width:100%}.fc .fc-multimonth-daygrid-table{border-top-style:hidden!important}.fc .fc-multimonth-singlecol .fc-multimonth{position:relative}.fc .fc-multimonth-singlecol .fc-multimonth-header{background:var(--fc-page-bg-color);position:relative;top:0;z-index:2}.fc .fc-multimonth-singlecol .fc-multimonth-daygrid{position:relative;z-index:1}.fc .fc-multimonth-singlecol .fc-multimonth-daygrid-table,.fc .fc-multimonth-singlecol .fc-multimonth-header-table{border-left-style:hidden;border-right-style:hidden}.fc .fc-multimonth-singlecol .fc-multimonth-month:last-child .fc-multimonth-daygrid-table{border-bottom-style:hidden}.fc .fc-multimonth-multicol{line-height:1}.fc .fc-multimonth-multicol .fc-multimonth-month{padding:0 1.2em 1.2em}.fc .fc-multimonth-multicol .fc-daygrid-more-link{border:1px solid var(--fc-event-border-color);display:block;float:none;padding:1px}.fc .fc-multimonth-compact{line-height:1}.fc .fc-multimonth-compact .fc-multimonth-daygrid-table,.fc .fc-multimonth-compact .fc-multimonth-header-table{font-size:.9em}.fc-media-screen .fc-multimonth-singlecol .fc-multimonth-header{position:sticky}.fc-media-print .fc-multimonth{overflow:visible}\";\ninjectStyles(css_248z);\n\nvar index = createPlugin({\n    name: '@fullcalendar/multimonth',\n    initialView: 'multiMonthYear',\n    optionRefiners: OPTION_REFINERS,\n    views: {\n        multiMonth: {\n            component: MultiMonthView,\n            dateProfileGeneratorClass: TableDateProfileGenerator,\n            multiMonthMinWidth: 350,\n            multiMonthMaxColumns: 3,\n        },\n        multiMonthYear: {\n            type: 'multiMonth',\n            duration: { years: 1 },\n            fixedWeekCount: true,\n            showNonCurrentDates: false,\n        },\n    },\n});\n\nexport { index as default };\n"],
  "mappings": "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",
  "names": []
}
