{
  "version": 3,
  "sources": ["../../../../../node_modules/ngx-window-token/fesm2020/ngx-window-token.mjs", "../../../../../node_modules/ngx-clipboard/fesm2020/ngx-clipboard.mjs"],
  "sourcesContent": ["import { InjectionToken } from '@angular/core';\n\nconst WINDOW = new InjectionToken('WindowToken', typeof window !== 'undefined' && window.document\n    ? { providedIn: 'root', factory: () => window }\n    : { providedIn: 'root', factory: () => undefined });\n\n/*\n * Public API Surface of ngx-window-token\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { WINDOW };\n\n", "import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\nclass ClipboardService {\n  constructor(ngZone, document, window) {\n    this.ngZone = ngZone;\n    this.document = document;\n    this.window = window;\n    this.copySubject = new Subject();\n    this.copyResponse$ = this.copySubject.asObservable();\n    this.config = {};\n  }\n  configure(config) {\n    this.config = config;\n  }\n  copy(content) {\n    if (!this.isSupported || !content) {\n      return this.pushCopyResponse({\n        isSuccess: false,\n        content\n      });\n    }\n    const copyResult = this.copyFromContent(content);\n    if (copyResult) {\n      return this.pushCopyResponse({\n        content,\n        isSuccess: copyResult\n      });\n    }\n    return this.pushCopyResponse({\n      isSuccess: false,\n      content\n    });\n  }\n  get isSupported() {\n    return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n  }\n  isTargetValid(element) {\n    if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n      if (element.hasAttribute('disabled')) {\n        throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n      }\n      return true;\n    }\n    throw new Error('Target should be input or textarea');\n  }\n  /**\n   * Attempts to copy from an input `targetElm`\n   */\n  copyFromInputElement(targetElm, isFocus = true) {\n    try {\n      this.selectTarget(targetElm);\n      const re = this.copyText();\n      this.clearSelection(isFocus ? targetElm : undefined, this.window);\n      return re && this.isCopySuccessInIE11();\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * This is a hack for IE11 to return `true` even if copy fails.\n   */\n  isCopySuccessInIE11() {\n    const clipboardData = this.window['clipboardData'];\n    if (clipboardData && clipboardData.getData) {\n      if (!clipboardData.getData('Text')) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n  copyFromContent(content, container = this.document.body) {\n    // check if the temp textarea still belongs to the current container.\n    // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n    if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n      this.destroy(this.tempTextArea.parentElement || undefined);\n    }\n    if (!this.tempTextArea) {\n      this.tempTextArea = this.createTempTextArea(this.document, this.window);\n      try {\n        container.appendChild(this.tempTextArea);\n      } catch (error) {\n        throw new Error('Container should be a Dom element');\n      }\n    }\n    this.tempTextArea.value = content;\n    const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n    if (this.config.cleanUpAfterCopy) {\n      this.destroy(this.tempTextArea.parentElement || undefined);\n    }\n    return toReturn;\n  }\n  /**\n   * Remove temporary textarea if any exists.\n   */\n  destroy(container = this.document.body) {\n    if (this.tempTextArea) {\n      container.removeChild(this.tempTextArea);\n      // removeChild doesn't remove the reference from memory\n      this.tempTextArea = undefined;\n    }\n  }\n  /**\n   * Select the target html input element.\n   */\n  selectTarget(inputElement) {\n    inputElement.select();\n    inputElement.setSelectionRange(0, inputElement.value.length);\n    return inputElement.value.length;\n  }\n  copyText() {\n    return this.document.execCommand('copy');\n  }\n  /**\n   * Moves focus away from `target` and back to the trigger, removes current selection.\n   */\n  clearSelection(inputElement, window) {\n    inputElement && inputElement.focus();\n    window.getSelection()?.removeAllRanges();\n  }\n  /**\n   * Creates a fake textarea for copy command.\n   */\n  createTempTextArea(doc, window) {\n    const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n    let ta;\n    ta = doc.createElement('textarea');\n    // Prevent zooming on iOS\n    ta.style.fontSize = '12pt';\n    // Reset box model\n    ta.style.border = '0';\n    ta.style.padding = '0';\n    ta.style.margin = '0';\n    // Move element out of screen horizontally\n    ta.style.position = 'absolute';\n    ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n    // Move element to the same position vertically\n    const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n    ta.style.top = yPosition + 'px';\n    ta.setAttribute('readonly', '');\n    return ta;\n  }\n  /**\n   * Pushes copy operation response to copySubject, to provide global access\n   * to the response.\n   */\n  pushCopyResponse(response) {\n    if (this.copySubject.observers.length > 0) {\n      this.ngZone.run(() => {\n        this.copySubject.next(response);\n      });\n    }\n  }\n  /**\n   * @deprecated use pushCopyResponse instead.\n   */\n  pushCopyReponse(response) {\n    this.pushCopyResponse(response);\n  }\n}\nClipboardService.ɵfac = function ClipboardService_Factory(t) {\n  return new (t || ClipboardService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(WINDOW, 8));\n};\nClipboardService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ClipboardService,\n  factory: ClipboardService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [WINDOW]\n      }]\n    }];\n  }, null);\n})();\nclass ClipboardDirective {\n  constructor(ngZone, host, renderer, clipboardSrv) {\n    this.ngZone = ngZone;\n    this.host = host;\n    this.renderer = renderer;\n    this.clipboardSrv = clipboardSrv;\n    this.cbOnSuccess = new EventEmitter();\n    this.cbOnError = new EventEmitter();\n    this.onClick = event => {\n      if (!this.clipboardSrv.isSupported) {\n        this.handleResult(false, undefined, event);\n      } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n        this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n      } else if (this.cbContent) {\n        this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n      }\n    };\n  }\n  // eslint-disable-next-line no-empty, @typescript-eslint/no-empty-function\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      // By default each host listener schedules change detection and also wrapped\n      // into additional function that calls `markForCheck()`. We're listening the `click`\n      // event in the context of the root zone to avoid running unnecessary change detections,\n      // since this directive doesn't do anything template-related (e.g. updates template variables).\n      this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n    });\n  }\n  ngOnDestroy() {\n    if (this.clickListener) {\n      this.clickListener();\n    }\n    this.clipboardSrv.destroy(this.container);\n  }\n  /**\n   * Fires an event based on the copy operation result.\n   * @param succeeded\n   */\n  handleResult(succeeded, copiedContent, event) {\n    let response = {\n      isSuccess: succeeded,\n      content: copiedContent,\n      successMessage: this.cbSuccessMsg,\n      event\n    };\n    if (succeeded) {\n      if (this.cbOnSuccess.observed) {\n        this.ngZone.run(() => {\n          this.cbOnSuccess.emit(response);\n        });\n      }\n    } else {\n      if (this.cbOnError.observed) {\n        this.ngZone.run(() => {\n          this.cbOnError.emit(response);\n        });\n      }\n    }\n    this.clipboardSrv.pushCopyResponse(response);\n  }\n}\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n  return new (t || ClipboardDirective)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ClipboardService));\n};\nClipboardDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ClipboardDirective,\n  selectors: [[\"\", \"ngxClipboard\", \"\"]],\n  inputs: {\n    targetElm: [i0.ɵɵInputFlags.None, \"ngxClipboard\", \"targetElm\"],\n    container: \"container\",\n    cbContent: \"cbContent\",\n    cbSuccessMsg: \"cbSuccessMsg\"\n  },\n  outputs: {\n    cbOnSuccess: \"cbOnSuccess\",\n    cbOnError: \"cbOnError\"\n  }\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboard]'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: ClipboardService\n    }];\n  }, {\n    targetElm: [{\n      type: Input,\n      args: ['ngxClipboard']\n    }],\n    container: [{\n      type: Input\n    }],\n    cbContent: [{\n      type: Input\n    }],\n    cbSuccessMsg: [{\n      type: Input\n    }],\n    cbOnSuccess: [{\n      type: Output\n    }],\n    cbOnError: [{\n      type: Output\n    }]\n  });\n})();\nclass ClipboardIfSupportedDirective {\n  constructor(_clipboardService, _viewContainerRef, _templateRef) {\n    this._clipboardService = _clipboardService;\n    this._viewContainerRef = _viewContainerRef;\n    this._templateRef = _templateRef;\n  }\n  ngOnInit() {\n    if (this._clipboardService.isSupported) {\n      this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n  }\n}\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) {\n  return new (t || ClipboardIfSupportedDirective)(i0.ɵɵdirectiveInject(ClipboardService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\nClipboardIfSupportedDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ClipboardIfSupportedDirective,\n  selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboardIfSupported]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\nclass ClipboardModule {}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n  return new (t || ClipboardModule)();\n};\nClipboardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ClipboardModule,\n  declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n  imports: [CommonModule],\n  exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n});\nClipboardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n      exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-clipboard\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n"],
  "mappings": "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",
  "names": ["window"]
}
