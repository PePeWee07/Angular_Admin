{"version":3,"file":"angularx-flatpickr.mjs","sources":["../../../projects/angularx-flatpickr/src/lib/flatpickr-defaults.service.ts","../../../projects/angularx-flatpickr/src/lib/flatpickr.directive.ts","../../../projects/angularx-flatpickr/src/lib/flatpickr.module.ts","../../../projects/angularx-flatpickr/src/public-api.ts","../../../projects/angularx-flatpickr/src/angularx-flatpickr.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport type DisableEnableDate =\n  | string\n  | Date\n  | { from: Date | string; to: Date | string }\n  | ((date: Date) => boolean);\n\nexport interface FlatpickrDefaultsInterface {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  altFormat?: string;\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  altInput?: boolean;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  altInputClass?: string;\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  allowInput?: boolean;\n\n  /**\n   * Allows the preloading of an invalid date. When disabled, the field will be cleared if the provided date is invalid\n   */\n  allowInvalidPreload?: boolean;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  appendTo?: HTMLElement;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  ariaDateFormat?: string;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  clickOpens?: boolean;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  dateFormat?: string;\n  /**\n   * Initial value of the hour element.\n   */\n  defaultHour?: number;\n  /**\n   * Initial value of the minute element.\n   */\n  defaultMinute?: number;\n  /**\n   * Initial value of the seconds element.\n   */\n  defaultSeconds?: number;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  disable?: DisableEnableDate[];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  disableMobile?: boolean;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  enable?: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  enableTime?: boolean;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  enableSeconds?: boolean;\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  formatDate?: (value: any) => string;\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  hourIncrement?: number;\n\n  /**\n   * Displays the calendar inline.\n   */\n  inline?: boolean;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  maxDate?: string | Date;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  minDate?: string | Date;\n\n  /**\n   * The maximum time that a user can pick to (inclusive).\n   */\n  maxTime?: string;\n\n  /**\n   * The minimum time that a user can start picking from (inclusive).\n   */\n  minTime?: string;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  minuteIncrement?: number;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  mode?: 'single' | 'multiple' | 'range';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  nextArrow?: string;\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  noCalendar?: boolean;\n\n  /**\n   * Provide a date for 'today', which will be used instead of \"new Date()\"\n   */\n  now?: Date | string | number;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  parseDate?: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  prevArrow?: string;\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  shorthandCurrentMonth?: boolean;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  static?: boolean;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  time24hr?: boolean;\n\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n  utc?: boolean;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  weekNumbers?: boolean;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  getWeek?: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  wrap?: boolean;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  plugins?: any[];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  locale?: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  convertModelValue?: boolean;\n\n  /**\n   * The number of months shown.\n   */\n  showMonths?: number;\n\n  /**\n   * How the month should be displayed in the header of the calendar.\n   */\n  monthSelectorType?: 'static' | 'dropdown';\n\n  /**\n   * Array of HTML elements that should not close the picker on click.\n   */\n  ignoredFocusElements?: HTMLElement[];\n}\n\n@Injectable()\nexport class FlatpickrDefaults implements FlatpickrDefaultsInterface {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  altFormat: string = 'F j, Y';\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  altInput: boolean = false;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  altInputClass: string = '';\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  allowInput: boolean = false;\n\n  /**\n   * Allows the preloading of an invalid date. When disabled, the field will be cleared if the provided date is invalid\n   */\n  allowInvalidPreload: boolean = false;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  appendTo: HTMLElement | undefined = undefined;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  ariaDateFormat?: string = 'F j, Y';\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  clickOpens: boolean = true;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  dateFormat: string = 'Y-m-d';\n\n  /**\n   * Initial value of the hour element.\n   */\n  defaultHour?: number = 12;\n\n  /**\n   * Initial value of the minute element.\n   */\n  defaultMinute?: number = 0;\n\n  /**\n   * Initial value of the seconds element.\n   */\n  defaultSeconds?: number = 0;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  disable: DisableEnableDate[] = [];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  disableMobile: boolean = false;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  enable: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  enableTime: boolean = false;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  enableSeconds: boolean = false;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  formatDate?: (value: any) => string = undefined;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  hourIncrement: number = 1;\n\n  /**\n   * Displays the calendar inline.\n   */\n  inline: boolean = false;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  maxDate: string | Date | undefined = undefined;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  minDate: string | Date | undefined = undefined;\n\n  /**\n   * The maximum time that a user can pick to (inclusive).\n   */\n  maxTime: string | undefined = undefined;\n\n  /**\n   * The minimum time that a user can start picking from (inclusive).\n   */\n  minTime: string | undefined = undefined;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  minuteIncrement: number = 5;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  mode: 'single' | 'multiple' | 'range' = 'single';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  nextArrow: string = '>';\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  noCalendar: boolean = false;\n\n  /**\n   * Default now to the current date\n   */\n  now: Date | string | number = new Date();\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  parseDate: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  prevArrow: string = '<';\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  shorthandCurrentMonth: boolean = false;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  static: boolean = false;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  time24hr: boolean = false;\n\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n  utc: boolean = false;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  weekNumbers: boolean = false;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  getWeek: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  wrap: boolean = false;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  plugins: any[] = [];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  locale: object | string = 'default';\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  convertModelValue: boolean = false;\n\n  /**\n   * The number of months shown.\n   */\n  showMonths: number = 1;\n\n  /**\n   * How the month should be displayed in the header of the calendar.\n   */\n  monthSelectorType: 'static' | 'dropdown' = 'static';\n\n  /**\n   * Array of HTML elements that should not close the picker on click.\n   */\n  ignoredFocusElements: HTMLElement[] = [];\n}\n","import {\n  Directive,\n  ElementRef,\n  AfterViewInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  forwardRef,\n  HostListener,\n  Renderer2,\n} from '@angular/core';\nimport {\n  FlatpickrDefaults,\n  DisableEnableDate,\n  FlatpickrDefaultsInterface,\n} from './flatpickr-defaults.service';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport flatpickr from 'flatpickr';\n\nexport interface FlatPickrOutputOptions {\n  selectedDates: Date[];\n  dateString: string;\n  instance: any;\n}\n\nexport interface FlatPickrDayCreateOutputOptions\n  extends FlatPickrOutputOptions {\n  dayElement: HTMLElement;\n}\n\nexport const FLATPICKR_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => FlatpickrDirective),\n  multi: true,\n};\n\n@Directive({\n  selector: '[mwlFlatpickr]',\n  providers: [FLATPICKR_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'mwlFlatpickr',\n})\nexport class FlatpickrDirective\n  implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor\n{\n  /**\n   * Object-options that can be user for multiple instances of Flatpickr.\n   * Option from this object is applied only if specific option is not specified.\n   * Example:\n   * ```typescript\n   * options: FlatpickrDefaultsInterface = {\n   *      altFormat: 'd/m/Y',   // will be ignored since altFormat is provided via specific attribute\n   *      altInput: true        // will be used since specific attribute is not provided\n   * };\n   * ```\n   * ```html\n   * <input\n   *   class=\"form-control\"\n   *   type=\"text\"\n   *   mwlFlatpickr\n   *   [options]=\"options\"\n   *   altFormat=\"d/m/Y\">\n   * ```\n   */\n  @Input() options: FlatpickrDefaultsInterface = {};\n\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  @Input() altFormat: string;\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  @Input() altInput: boolean;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  @Input() altInputClass: string;\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  @Input() allowInput: boolean;\n\n\n  /**\n   * Allows the preloading of an invalid date. When disabled, the field will be cleared if the provided date is invalid\n   */\n  @Input() allowInvalidPreload: boolean;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  @Input() appendTo: HTMLElement;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  @Input() ariaDateFormat?: string;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  @Input() clickOpens: boolean;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  @Input() dateFormat: string;\n\n  /**\n   * Initial value of the hour element.\n   */\n  @Input() defaultHour?: number;\n  /**\n   * Initial value of the minute element.\n   */\n  @Input() defaultMinute?: number;\n\n  /**\n   * Initial value of the seconds element.\n   */\n  @Input() defaultSeconds?: number;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  @Input() disable: DisableEnableDate[];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  @Input() disableMobile: boolean;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  @Input() enable: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  @Input() enableTime: boolean;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  @Input() enableSeconds: boolean;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  @Input() formatDate?: (value: any) => string;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  @Input() hourIncrement: number;\n\n  /**\n   * Displays the calendar inline.\n   */\n  @Input() inline: boolean;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  @Input() maxDate: string | Date;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  @Input() minDate: string | Date;\n\n  /**\n   * The maximum time that a user can pick to (inclusive).\n   */\n  @Input() maxTime: string;\n\n  /**\n   * The minimum time that a user can start picking from (inclusive).\n   */\n  @Input() minTime: string;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  @Input() minuteIncrement: number;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  @Input() mode: 'single' | 'multiple' | 'range';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  @Input() nextArrow: string;\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  @Input() noCalendar: boolean;\n\n  /**\n   * Provide a date for 'today', which will be used instead of \"new Date()\"\n   */\n  @Input() now?: Date | string | number;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  @Input() parseDate: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  @Input() prevArrow: string;\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  @Input() shorthandCurrentMonth: boolean;\n\n  /**\n   * The number of months shown.\n   */\n  @Input() showMonths: number;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  @Input() static: boolean;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  @Input() time24hr: boolean;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  @Input() weekNumbers: boolean;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  @Input() getWeek: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  @Input() wrap: boolean;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  @Input() plugins: any[];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  @Input() locale: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  @Input() convertModelValue: boolean;\n\n  /**\n   * How the month should be displayed in the header of the calendar.\n   */\n  @Input() monthSelectorType: 'static' | 'dropdown';\n\n  /**\n   * Array of HTML elements that should not close the picker on click.\n   */\n  @Input() ignoredFocusElements: HTMLElement[] = [];\n\n  /**\n   * Gets triggered once the calendar is in a ready state\n   */\n  @Output()\n  flatpickrReady: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the user selects a date, or changes the time on a selected date.\n   */\n  @Output()\n  flatpickrChange: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the input value is updated with a new date string.\n   */\n  @Output()\n  flatpickrValueUpdate: EventEmitter<FlatPickrOutputOptions> =\n    new EventEmitter();\n\n  /**\n   * Gets triggered when the calendar is opened.\n   */\n  @Output()\n  flatpickrOpen: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the calendar is closed.\n   */\n  @Output()\n  flatpickrClose: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the month is changed, either by the user or programmatically.\n   */\n  @Output()\n  flatpickrMonthChange: EventEmitter<FlatPickrOutputOptions> =\n    new EventEmitter();\n\n  /**\n   * Gets triggered when the year is changed, either by the user or programmatically.\n   */\n  @Output()\n  flatpickrYearChange: EventEmitter<FlatPickrOutputOptions> =\n    new EventEmitter();\n\n  /**\n   * Take full control of every date cell with this output\n   */\n  @Output()\n  flatpickrDayCreate: EventEmitter<FlatPickrDayCreateOutputOptions> =\n    new EventEmitter();\n\n  /**\n   * The flatpickr instance where you can call methods like toggle(), open(), close() etc\n   */\n  instance: flatpickr.Instance;\n\n  private isDisabled = false;\n  private initialValue: any;\n\n  onChangeFn: (value: any) => void = () => {};\n\n  @HostListener('blur')\n  onTouchedFn = () => {};\n\n  constructor(\n    private elm: ElementRef,\n    private defaults: FlatpickrDefaults,\n    private renderer: Renderer2\n  ) {}\n\n  ngAfterViewInit(): void {\n    const options: any = {\n      altFormat: this.altFormat,\n      altInput: this.altInput,\n      altInputClass: this.altInputClass,\n      allowInput: this.allowInput,\n      allowInvalidPreload: this.allowInvalidPreload,\n      appendTo: this.appendTo,\n      ariaDateFormat: this.ariaDateFormat,\n      clickOpens: this.clickOpens,\n      dateFormat: this.dateFormat,\n      defaultHour: this.defaultHour,\n      defaultMinute: this.defaultMinute,\n      defaultSeconds: this.defaultSeconds,\n      disable: this.disable,\n      disableMobile: this.disableMobile,\n      enable: this.enable,\n      enableTime: this.enableTime,\n      enableSeconds: this.enableSeconds,\n      formatDate: this.formatDate,\n      hourIncrement: this.hourIncrement,\n      defaultDate: this.initialValue,\n      inline: this.inline,\n      maxDate: this.maxDate,\n      minDate: this.minDate,\n      maxTime: this.maxTime,\n      minTime: this.minTime,\n      minuteIncrement: this.minuteIncrement,\n      mode: this.mode,\n      nextArrow: this.nextArrow,\n      noCalendar: this.noCalendar,\n      now: this.now,\n      parseDate: this.parseDate,\n      prevArrow: this.prevArrow,\n      shorthandCurrentMonth: this.shorthandCurrentMonth,\n      showMonths: this.showMonths,\n      monthSelectorType: this.monthSelectorType,\n      static: this.static,\n      time24hr: this.time24hr,\n      weekNumbers: this.weekNumbers,\n      getWeek: this.getWeek,\n      wrap: this.wrap,\n      plugins: this.plugins,\n      locale: this.locale,\n      ignoredFocusElements: this.ignoredFocusElements,\n      onChange: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrChange.emit({ selectedDates, dateString, instance });\n      },\n      onOpen: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrOpen.emit({ selectedDates, dateString, instance });\n      },\n      onClose: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrClose.emit({ selectedDates, dateString, instance });\n      },\n      onMonthChange: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrMonthChange.emit({ selectedDates, dateString, instance });\n      },\n      onYearChange: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrYearChange.emit({ selectedDates, dateString, instance });\n      },\n      onReady: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrReady.emit({ selectedDates, dateString, instance });\n      },\n      onValueUpdate: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrValueUpdate.emit({ selectedDates, dateString, instance });\n      },\n      onDayCreate: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any,\n        dayElement: HTMLElement\n      ) => {\n        this.flatpickrDayCreate.emit({\n          selectedDates,\n          dateString,\n          instance,\n          dayElement,\n        });\n      },\n    };\n\n    Object.keys(options).forEach((key) => {\n      if (typeof options[key] === 'undefined') {\n        if (typeof (this.options as any)[key] !== 'undefined') {\n          options[key] = (this.options as any)[key];\n        } else {\n          options[key] = (this.defaults as any)[key];\n        }\n      }\n    });\n\n    // @ts-ignore\n    options.time_24hr = options.time24hr;\n\n    // workaround bug in flatpickr 4.6 where it doesn't copy the classes across\n    // TODO - remove once fix in https://github.com/flatpickr/flatpickr/issues/1860 is released\n    options.altInputClass =\n      (options.altInputClass || '') + ' ' + this.elm.nativeElement.className;\n\n    if (!options.enable) {\n      delete options.enable;\n    }\n\n    this.instance = flatpickr(\n      this.elm.nativeElement,\n      options\n    ) as flatpickr.Instance;\n    this.setDisabledState(this.isDisabled);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.instance) {\n      Object.keys(changes).forEach((inputKey) => {\n        this.instance.set(inputKey as any, (this as any)[inputKey]);\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.instance) {\n      this.instance.destroy();\n    }\n  }\n\n  writeValue(value: any): void {\n    let convertedValue: any = value;\n    if (this.convertModelValue && this.mode === 'range' && value) {\n      convertedValue = [value.from, value.to];\n    }\n\n    if (this.instance) {\n      this.instance.setDate(convertedValue);\n    } else {\n      // flatpickr hasn't been initialised yet, store the value for later use\n      this.initialValue = convertedValue;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeFn = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouchedFn = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    if (this.instance) {\n      if (this.isDisabled) {\n        this.renderer.setProperty(this.instance._input, 'disabled', 'disabled');\n      } else {\n        this.renderer.removeAttribute(this.instance._input, 'disabled');\n      }\n    }\n  }\n\n  @HostListener('input')\n  inputChanged(): void {\n    const value: string = this.elm.nativeElement.value;\n    if (this.convertModelValue && typeof value === 'string') {\n      switch (this.mode) {\n        case 'multiple':\n          const dates: Array<Date | undefined> = value\n            .split('; ')\n            .map((str) =>\n              this.instance.parseDate(\n                str,\n                this.instance.config.dateFormat,\n                !this.instance.config.enableTime\n              )\n            );\n          this.onChangeFn(dates);\n          break;\n\n        case 'range':\n          const [from, to] = value\n            .split(this.instance.l10n.rangeSeparator)\n            .map((str) =>\n              this.instance.parseDate(\n                str,\n                this.instance.config.dateFormat,\n                !this.instance.config.enableTime\n              )\n            );\n          this.onChangeFn({ from, to });\n          break;\n\n        case 'single':\n        default:\n          this.onChangeFn(\n            this.instance.parseDate(\n              value,\n              this.instance.config.dateFormat,\n              !this.instance.config.enableTime\n            )\n          );\n      }\n    } else {\n      this.onChangeFn(value);\n    }\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  InjectionToken,\n  Provider\n} from '@angular/core';\nimport { FlatpickrDirective } from './flatpickr.directive';\nimport {\n  FlatpickrDefaults,\n  FlatpickrDefaultsInterface\n} from './flatpickr-defaults.service';\n\nexport const USER_DEFAULTS = new InjectionToken('flatpickr defaults');\n\nexport function defaultsFactory(\n  userDefaults: FlatpickrDefaultsInterface\n): FlatpickrDefaults {\n  const defaults: FlatpickrDefaults = new FlatpickrDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [FlatpickrDirective],\n  exports: [FlatpickrDirective]\n})\nexport class FlatpickrModule {\n  static forRoot(\n    userDefaults: FlatpickrDefaultsInterface = {}\n  ): ModuleWithProviders<FlatpickrModule> {\n    return {\n      ngModule: FlatpickrModule,\n      providers: [\n        {\n          provide: USER_DEFAULTS,\n          useValue: userDefaults\n        },\n        {\n          provide: FlatpickrDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS]\n        }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of angularx-flatpickr\n */\n\nexport * from './lib/flatpickr.module';\nexport { FlatpickrDefaults, FlatpickrDefaultsInterface } from './lib/flatpickr-defaults.service';\nexport { FlatpickrDirective } from './lib/flatpickr.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.FlatpickrDefaults"],"mappings":"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"}