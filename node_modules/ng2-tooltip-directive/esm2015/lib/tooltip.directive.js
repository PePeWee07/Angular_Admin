import { Directive, HostListener, Input, Output, EventEmitter, Inject, Optional } from '@angular/core';
import { TooltipComponent } from './tooltip.component';
import { TooltipOptionsService } from './options.service';
import { defaultOptions, backwardCompatibilityOptions } from './options';
import * as i0 from "@angular/core";
export class TooltipDirective {
    constructor(initOptions, elementRef, componentFactoryResolver, appRef, injector) {
        this.initOptions = initOptions;
        this.elementRef = elementRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this._options = {};
        this._contentType = "string";
        this.events = new EventEmitter();
    }
    set options(value) {
        if (value && defaultOptions) {
            this._options = value;
        }
    }
    get options() {
        return this._options;
    }
    // Content type
    set contentTypeBackwardCompatibility(value) {
        if (value) {
            this._contentType = value;
        }
    }
    set contentType(value) {
        if (value) {
            this._contentType = value;
        }
    }
    get contentType() {
        return this._contentType;
    }
    // z-index
    set zIndexBackwardCompatibility(value) {
        if (value) {
            this._zIndex = value;
        }
    }
    set zIndex(value) {
        if (value) {
            this._zIndex = value;
        }
    }
    get zIndex() {
        return this._zIndex;
    }
    // Animation duration
    set animationDurationBackwardCompatibility(value) {
        if (value) {
            this._animationDuration = value;
        }
    }
    set animationDuration(value) {
        if (value) {
            this._animationDuration = value;
        }
    }
    get animationDuration() {
        return this._animationDuration;
    }
    // Tooltip class
    set tooltipClassBackwardCompatibility(value) {
        if (value) {
            this._tooltipClass = value;
        }
    }
    set tooltipClass(value) {
        if (value) {
            this._tooltipClass = value;
        }
    }
    get tooltipClass() {
        return this._tooltipClass;
    }
    // Max width
    set maxWidthBackwardCompatibility(value) {
        if (value) {
            this._maxWidth = value;
        }
    }
    set maxWidth(value) {
        if (value) {
            this._maxWidth = value;
        }
    }
    get maxWidth() {
        return this._maxWidth;
    }
    // Show delay
    set showDelayBackwardCompatibility(value) {
        if (value) {
            this._showDelay = value;
        }
    }
    set showDelay(value) {
        if (value) {
            this._showDelay = value;
        }
    }
    get showDelay() {
        return this._showDelay;
    }
    // Hide delay
    set hideDelayBackwardCompatibility(value) {
        if (value) {
            this._hideDelay = value;
        }
    }
    set hideDelay(value) {
        if (value) {
            this._hideDelay = value;
        }
    }
    get hideDelay() {
        return this._hideDelay;
    }
    get isTooltipDestroyed() {
        return this.componentRef && this.componentRef.hostView.destroyed;
    }
    get destroyDelay() {
        if (this._destroyDelay) {
            return this._destroyDelay;
        }
        else {
            return Number(this.getHideDelay()) + Number(this.options['animationDuration']);
        }
    }
    set destroyDelay(value) {
        this._destroyDelay = value;
    }
    get tooltipPosition() {
        if (this.options['position']) {
            return this.options['position'];
        }
        else {
            return this.elementPosition;
        }
    }
    onMouseEnter() {
        if (this.isDisplayOnHover == false) {
            return;
        }
        this.show();
    }
    onMouseLeave() {
        if (this.options['trigger'] === 'hover') {
            this.destroyTooltip();
        }
    }
    onClick() {
        if (this.isDisplayOnClick == false) {
            return;
        }
        this.show();
        this.hideAfterClickTimeoutId = window.setTimeout(() => {
            this.destroyTooltip();
        }, this.options['hideDelayAfterClick']);
    }
    ngOnInit() {
    }
    ngOnChanges(changes) {
        this.initOptions = this.renameProperties(this.initOptions);
        let changedOptions = this.getProperties(changes);
        changedOptions = this.renameProperties(changedOptions);
        this.applyOptionsDefault(defaultOptions, changedOptions);
    }
    ngOnDestroy() {
        this.destroyTooltip({
            fast: true
        });
        if (this.componentSubscribe) {
            this.componentSubscribe.unsubscribe();
        }
    }
    getShowDelay() {
        return this.options['showDelay'];
    }
    getHideDelay() {
        const hideDelay = this.options['hideDelay'];
        const hideDelayTouchscreen = this.options['hideDelayTouchscreen'];
        return this.isTouchScreen ? hideDelayTouchscreen : hideDelay;
    }
    getProperties(changes) {
        let directiveProperties = {};
        let customProperties = {};
        let allProperties = {};
        for (var prop in changes) {
            if (prop !== 'options' && prop !== 'tooltipValue') {
                directiveProperties[prop] = changes[prop].currentValue;
            }
            if (prop === 'options') {
                customProperties = changes[prop].currentValue;
            }
        }
        allProperties = Object.assign({}, customProperties, directiveProperties);
        return allProperties;
    }
    renameProperties(options) {
        for (var prop in options) {
            if (backwardCompatibilityOptions[prop]) {
                options[backwardCompatibilityOptions[prop]] = options[prop];
                delete options[prop];
            }
        }
        return options;
    }
    getElementPosition() {
        this.elementPosition = this.elementRef.nativeElement.getBoundingClientRect();
    }
    createTooltip() {
        this.clearTimeouts();
        this.getElementPosition();
        this.createTimeoutId = window.setTimeout(() => {
            this.appendComponentToBody(TooltipComponent);
        }, this.getShowDelay());
        this.showTimeoutId = window.setTimeout(() => {
            this.showTooltipElem();
        }, this.getShowDelay());
    }
    destroyTooltip(options = {
        fast: false
    }) {
        this.clearTimeouts();
        if (this.isTooltipDestroyed == false) {
            this.hideTimeoutId = window.setTimeout(() => {
                this.hideTooltip();
            }, options.fast ? 0 : this.getHideDelay());
            this.destroyTimeoutId = window.setTimeout(() => {
                if (!this.componentRef || this.isTooltipDestroyed) {
                    return;
                }
                this.appRef.detachView(this.componentRef.hostView);
                this.componentRef.destroy();
                this.events.emit({
                    type: 'hidden',
                    position: this.tooltipPosition
                });
            }, options.fast ? 0 : this.destroyDelay);
        }
    }
    showTooltipElem() {
        this.clearTimeouts();
        this.componentRef.instance.show = true;
        this.events.emit({
            type: 'show',
            position: this.tooltipPosition
        });
    }
    hideTooltip() {
        if (!this.componentRef || this.isTooltipDestroyed) {
            return;
        }
        this.componentRef.instance.show = false;
        this.events.emit({
            type: 'hide',
            position: this.tooltipPosition
        });
    }
    appendComponentToBody(component, data = {}) {
        this.componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        this.componentRef.instance.data = {
            value: this.tooltipValue,
            element: this.elementRef.nativeElement,
            elementPosition: this.tooltipPosition,
            options: this.options
        };
        this.appRef.attachView(this.componentRef.hostView);
        const domElem = this.componentRef.hostView.rootNodes[0];
        document.body.appendChild(domElem);
        this.componentSubscribe = this.componentRef.instance.events.subscribe((event) => {
            this.handleEvents(event);
        });
    }
    clearTimeouts() {
        if (this.createTimeoutId) {
            clearTimeout(this.createTimeoutId);
        }
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
        }
        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
        }
        if (this.destroyTimeoutId) {
            clearTimeout(this.destroyTimeoutId);
        }
    }
    get isDisplayOnHover() {
        if (this.options['display'] == false) {
            return false;
        }
        if (this.options['displayTouchscreen'] == false && this.isTouchScreen) {
            return false;
        }
        if (this.options['trigger'] !== 'hover') {
            return false;
        }
        return true;
    }
    get isDisplayOnClick() {
        if (this.options['display'] == false) {
            return false;
        }
        if (this.options['displayTouchscreen'] == false && this.isTouchScreen) {
            return false;
        }
        if (this.options['trigger'] != 'click') {
            return false;
        }
        return true;
    }
    get isTouchScreen() {
        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
        var mq = function (query) {
            return window.matchMedia(query).matches;
        };
        if (('ontouchstart' in window)) {
            return true;
        }
        // include the 'heartz' as a way to have a non matching MQ to help terminate the join
        // https://git.io/vznFH
        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');
        return mq(query);
    }
    applyOptionsDefault(defaultOptions, options) {
        this.options = Object.assign({}, defaultOptions, this.initOptions || {}, this.options, options);
    }
    handleEvents(event) {
        if (event.type === 'shown') {
            this.events.emit({
                type: 'shown',
                position: this.tooltipPosition
            });
        }
    }
    show() {
        if (!this.tooltipValue) {
            return;
        }
        if (!this.componentRef || this.isTooltipDestroyed) {
            this.createTooltip();
        }
        else if (!this.isTooltipDestroyed) {
            this.showTooltipElem();
        }
    }
    hide() {
        this.destroyTooltip();
    }
}
TooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: TooltipDirective, deps: [{ token: TooltipOptionsService, optional: true }, { token: i0.ElementRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive });
TooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: TooltipDirective, selector: "[tooltip]", inputs: { options: "options", tooltipValue: ["tooltip", "tooltipValue"], placement: "placement", autoPlacement: "autoPlacement", contentTypeBackwardCompatibility: ["content-type", "contentTypeBackwardCompatibility"], contentType: "contentType", hideDelayMobile: ["hide-delay-mobile", "hideDelayMobile"], hideDelayTouchscreen: "hideDelayTouchscreen", zIndexBackwardCompatibility: ["z-index", "zIndexBackwardCompatibility"], zIndex: "zIndex", animationDurationBackwardCompatibility: ["animation-duration", "animationDurationBackwardCompatibility"], animationDuration: "animationDuration", trigger: "trigger", tooltipClassBackwardCompatibility: ["tooltip-class", "tooltipClassBackwardCompatibility"], tooltipClass: "tooltipClass", display: "display", displayMobile: ["display-mobile", "displayMobile"], displayTouchscreen: "displayTouchscreen", shadow: "shadow", theme: "theme", offset: "offset", width: "width", maxWidthBackwardCompatibility: ["max-width", "maxWidthBackwardCompatibility"], maxWidth: "maxWidth", id: "id", showDelayBackwardCompatibility: ["show-delay", "showDelayBackwardCompatibility"], showDelay: "showDelay", hideDelayBackwardCompatibility: ["hide-delay", "hideDelayBackwardCompatibility"], hideDelay: "hideDelay", hideDelayAfterClick: "hideDelayAfterClick", pointerEvents: "pointerEvents", position: "position" }, outputs: { events: "events" }, host: { listeners: { "focusin": "onMouseEnter()", "mouseenter": "onMouseEnter()", "focusout": "onMouseLeave()", "mouseleave": "onMouseLeave()", "click": "onClick()" } }, exportAs: ["tooltip"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: TooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tooltip]',
                    exportAs: 'tooltip',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TooltipOptionsService]
                }] }, { type: i0.ElementRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }]; }, propDecorators: { options: [{
                type: Input,
                args: ['options']
            }], tooltipValue: [{
                type: Input,
                args: ['tooltip']
            }], placement: [{
                type: Input,
                args: ['placement']
            }], autoPlacement: [{
                type: Input,
                args: ['autoPlacement']
            }], contentTypeBackwardCompatibility: [{
                type: Input,
                args: ['content-type']
            }], contentType: [{
                type: Input,
                args: ['contentType']
            }], hideDelayMobile: [{
                type: Input,
                args: ['hide-delay-mobile']
            }], hideDelayTouchscreen: [{
                type: Input,
                args: ['hideDelayTouchscreen']
            }], zIndexBackwardCompatibility: [{
                type: Input,
                args: ['z-index']
            }], zIndex: [{
                type: Input,
                args: ['zIndex']
            }], animationDurationBackwardCompatibility: [{
                type: Input,
                args: ['animation-duration']
            }], animationDuration: [{
                type: Input,
                args: ['animationDuration']
            }], trigger: [{
                type: Input,
                args: ['trigger']
            }], tooltipClassBackwardCompatibility: [{
                type: Input,
                args: ['tooltip-class']
            }], tooltipClass: [{
                type: Input,
                args: ['tooltipClass']
            }], display: [{
                type: Input,
                args: ['display']
            }], displayMobile: [{
                type: Input,
                args: ['display-mobile']
            }], displayTouchscreen: [{
                type: Input,
                args: ['displayTouchscreen']
            }], shadow: [{
                type: Input,
                args: ['shadow']
            }], theme: [{
                type: Input,
                args: ['theme']
            }], offset: [{
                type: Input,
                args: ['offset']
            }], width: [{
                type: Input,
                args: ['width']
            }], maxWidthBackwardCompatibility: [{
                type: Input,
                args: ['max-width']
            }], maxWidth: [{
                type: Input,
                args: ['maxWidth']
            }], id: [{
                type: Input,
                args: ['id']
            }], showDelayBackwardCompatibility: [{
                type: Input,
                args: ['show-delay']
            }], showDelay: [{
                type: Input,
                args: ['showDelay']
            }], hideDelayBackwardCompatibility: [{
                type: Input,
                args: ['hide-delay']
            }], hideDelay: [{
                type: Input,
                args: ['hideDelay']
            }], hideDelayAfterClick: [{
                type: Input,
                args: ['hideDelayAfterClick']
            }], pointerEvents: [{
                type: Input,
                args: ['pointerEvents']
            }], position: [{
                type: Input,
                args: ['position']
            }], events: [{
                type: Output
            }], onMouseEnter: [{
                type: HostListener,
                args: ['focusin']
            }, {
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['focusout']
            }, {
                type: HostListener,
                args: ['mouseleave']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,