import * as i0 from '@angular/core';
import { EventEmitter, PLATFORM_ID, Directive, Inject, Input, Output, HostListener, NgModule } from '@angular/core';
import { CountUp } from 'countup.js';
import { isPlatformBrowser } from '@angular/common';

class CountUpDirective {
    constructor(el, zone, platformId) {
        this.el = el;
        this.zone = zone;
        this.platformId = platformId;
        this.options = {};
        this.reanimateOnClick = true;
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.complete = new EventEmitter();
    }
    // Re-animate if preference is set.
    onClick() {
        if (this.reanimateOnClick) {
            this.animate();
        }
    }
    ngOnChanges(changes) {
        // don't animate server-side (universal)
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        const { options, endVal } = changes;
        if (endVal?.currentValue !== undefined) {
            if (this.countUp !== undefined) {
                this.zone.runOutsideAngular(() => {
                    this.countUp.update(this.endVal);
                });
            }
            else {
                this.initAndRun();
            }
        }
        else if (options?.currentValue !== undefined) {
            this.initAndRun();
        }
    }
    animate() {
        this.zone.runOutsideAngular(() => {
            this.countUp.reset();
            this.countUp.start(() => {
                this.zone.run(() => {
                    this.complete.emit();
                });
            });
        });
    }
    initAndRun() {
        this.zone.runOutsideAngular(() => {
            this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);
            if (!this.options.enableScrollSpy) {
                this.animate();
            }
        });
    }
}
CountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });
CountUpDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.2", type: CountUpDirective, selector: "[countUp]", inputs: { endVal: ["countUp", "endVal"], options: "options", reanimateOnClick: "reanimateOnClick" }, outputs: { complete: "complete" }, host: { listeners: { "click": "onClick()" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: CountUpDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[countUp]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { endVal: [{
                type: Input,
                args: ['countUp']
            }], options: [{
                type: Input
            }], reanimateOnClick: [{
                type: Input
            }], complete: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

class CountUpModule {
}
CountUpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: CountUpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CountUpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: CountUpModule, declarations: [CountUpDirective], exports: [CountUpDirective] });
CountUpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: CountUpModule, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: CountUpModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [CountUpDirective],
                    exports: [CountUpDirective]
                }]
        }] });

/*
 * Public API Surface of count-up
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CountUpDirective, CountUpModule };
//# sourceMappingURL=ngx-countup.mjs.map
