"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CanNotReadDestOnNGPackageError = exports.CanNotReadNGPackageError = exports.ngPackageStrategy = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const path = require("path");
const file_utils_1 = require("../../../file-utils");
const shared_1 = require("../shared");
/**
 * The strategy applied for Angular Libraries.
 * Angular libraries have a file called `ng-package.json`.
 * Inside that JSON file, there is a property called `dest`, which will indicate where
 * the dist folder path is
 *
 * @example ```json
 * // ng-package.json
 * {
 *   "$schema": "../../node_modules/ng-packagr/ng-package.schema.json",
 *   "dest": "../../dist/angular-lib", // <---- dist folder path
 *   "lib": {
 *     "entryFile": "src/public-api.ts"
 *   }
 * }
 * ```
 */
exports.ngPackageStrategy = {
    name: 'ngPackage.json file',
    isStrategyApplicable: (buildOptions) => buildOptions.project != undefined &&
        typeof buildOptions.project === 'string',
    executor: (projectRoot, buildOptions, publishOptions) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        if (!exports.ngPackageStrategy.isStrategyApplicable(buildOptions, publishOptions)) {
            throw new shared_1.UnapplicableStrategyError(exports.ngPackageStrategy.name);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const ngPackagePath = path.join(projectRoot, buildOptions.project);
        let ngPackageContentStr;
        try {
            ngPackageContentStr = yield (0, file_utils_1.readFileAsync)(ngPackagePath, {
                encoding: 'utf8',
            });
        }
        catch (error) {
            devkit_1.logger.error(error);
            throw new CanNotReadNGPackageError();
        }
        const ngPackageContent = JSON.parse(ngPackageContentStr);
        if (!ngPackageContent.dest || typeof ngPackageContent.dest !== 'string') {
            throw new CanNotReadDestOnNGPackageError();
        }
        const outputPath = path.join(path.dirname(ngPackagePath), ngPackageContent.dest);
        return outputPath;
    }),
};
class CanNotReadNGPackageError extends Error {
    constructor() {
        const errorMsg = 'Error reading the ng-package.json';
        super(errorMsg);
        // Ensure the name of this error is the same as the class name
        this.name = this.constructor.name;
        // It does make the stack trace a little nicer.
        //  @see Node.js reference (bottom)
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.CanNotReadNGPackageError = CanNotReadNGPackageError;
class CanNotReadDestOnNGPackageError extends Error {
    constructor() {
        const errorMsg = "'dest' option on ng-package.json doesn't exists or it's not a string";
        super(errorMsg);
        // Ensure the name of this error is the same as the class name
        this.name = this.constructor.name;
        // It does make the stack trace a little nicer.
        //  @see Node.js reference (bottom)
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.CanNotReadDestOnNGPackageError = CanNotReadDestOnNGPackageError;
//# sourceMappingURL=ng-package.js.map