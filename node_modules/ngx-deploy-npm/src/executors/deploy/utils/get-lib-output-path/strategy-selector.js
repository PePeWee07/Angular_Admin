"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotAbleToDetermineDistPathError = exports.getLibOutPutPath = void 0;
const tslib_1 = require("tslib");
const strategies = require("./strategies");
function getLibOutPutPath(projectRoot, buildOptions, publishOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const strategyChosen = chooseStrategy(buildOptions, publishOptions);
        return strategyChosen(projectRoot, buildOptions, publishOptions);
    });
}
exports.getLibOutPutPath = getLibOutPutPath;
function chooseStrategy(buildOptions, publishOptions) {
    if (strategies.customDistPathStrategy.isStrategyApplicable(buildOptions, publishOptions)) {
        return strategies.customDistPathStrategy.executor;
    }
    if (strategies.outputPathOptionStrategy.isStrategyApplicable(buildOptions, publishOptions)) {
        return strategies.outputPathOptionStrategy.executor;
    }
    if (strategies.ngPackageStrategy.isStrategyApplicable(buildOptions, publishOptions)) {
        return strategies.ngPackageStrategy.executor;
    }
    throw new NotAbleToDetermineDistPathError();
}
class NotAbleToDetermineDistPathError extends Error {
    constructor() {
        const errorMsg = `ngx-deploy-npm was not able to detect the dist path.\n
Use the option --dist-folder-path to indicate where is the dist folder of your library\n
Write us an issue to add support to your library -> https://github.com/bikecoders/ngx-deploy-npm/issues/new`;
        super(errorMsg);
        // Ensure the name of this error is the same as the class name
        this.name = this.constructor.name;
        // It does make the stack trace a little nicer.
        //  @see Node.js reference (bottom)
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.NotAbleToDetermineDistPathError = NotAbleToDetermineDistPathError;
//# sourceMappingURL=strategy-selector.js.map