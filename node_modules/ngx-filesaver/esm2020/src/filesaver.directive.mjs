import { Directive, Input, HostListener, EventEmitter, Output } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "./filesaver.service";
import * as i2 from "@angular/common/http";
export class FileSaverDirective {
    constructor(el, fss, httpClient) {
        this.el = el;
        this.fss = fss;
        this.httpClient = httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        if (!fss.isFileSaverSupported) {
            el.nativeElement.classList.add(`filesaver__not-support`);
        }
    }
    getName(res) {
        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename') || '');
    }
    _click() {
        if (!this.fss.isFileSaverSupported) {
            return;
        }
        let req = this.http;
        if (!req) {
            let params = new HttpParams();
            const query = this.query || {};
            // tslint:disable-next-line:forin
            for (const item in query) {
                params = params.set(item, query[item]);
            }
            req = this.httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params,
            });
        }
        this.setDisabled(true);
        req.subscribe((res) => {
            if (res.status !== 200 || res.body.size <= 0) {
                this.error.emit(res);
                return;
            }
            this.fss.save(res.body, this.getName(res), undefined, this.fsOptions);
            this.success.emit(res);
        }, (err) => this.error.emit(err), () => this.setDisabled(false));
    }
    setDisabled(status) {
        const el = this.el.nativeElement;
        el.disabled = status;
        el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);
    }
}
FileSaverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.3", ngImport: i0, type: FileSaverDirective, deps: [{ token: i0.ElementRef }, { token: i1.FileSaverService }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Directive });
FileSaverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.3", type: FileSaverDirective, isStandalone: true, selector: "[fileSaver]", inputs: { method: "method", http: "http", query: "query", header: "header", url: "url", fileName: "fileName", fsOptions: "fsOptions" }, outputs: { success: "success", error: "error" }, host: { listeners: { "click": "_click()" } }, exportAs: ["fileSaver"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.3", ngImport: i0, type: FileSaverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fileSaver]',
                    exportAs: 'fileSaver',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FileSaverService }, { type: i2.HttpClient }]; }, propDecorators: { method: [{
                type: Input
            }], http: [{
                type: Input
            }], query: [{
                type: Input
            }], header: [{
                type: Input
            }], url: [{
                type: Input
            }], fileName: [{
                type: Input
            }], fsOptions: [{
                type: Input
            }], success: [{
                type: Output
            }], error: [{
                type: Output
            }], _click: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9zcmMvZmlsZXNhdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLEtBQUssRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQWMsVUFBVSxFQUFnQixNQUFNLHNCQUFzQixDQUFDOzs7O0FBVTVFLE1BQU0sT0FBTyxrQkFBa0I7SUFXN0IsWUFBb0IsRUFBaUMsRUFBVSxHQUFxQixFQUFVLFVBQXNCO1FBQWhHLE9BQUUsR0FBRixFQUFFLENBQStCO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBVjNHLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFPTCxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7UUFDakQsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFHakQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRTtZQUM3QixFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUM7SUFFTyxPQUFPLENBQUMsR0FBdUI7UUFDckMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBR0QsTUFBTTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFO1lBQ2xDLE9BQU87U0FDUjtRQUNELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLElBQUksTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7WUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDL0IsaUNBQWlDO1lBQ2pDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO2dCQUN4QixNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDeEM7WUFFRCxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNuRCxPQUFPLEVBQUUsVUFBVTtnQkFDbkIsWUFBWSxFQUFFLE1BQU07Z0JBQ3BCLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDcEIsTUFBTTthQUNQLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixHQUFHLENBQUMsU0FBUyxDQUNYLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDTixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTtnQkFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLE9BQU87YUFDUjtZQUNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsRUFDRCxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQzdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQzlCLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQWU7UUFDekIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDakMsRUFBRSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDckIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNqRSxDQUFDOzsrR0E5RFUsa0JBQWtCO21HQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFMOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjt5SkFFVSxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csU0FBUztzQkFBakIsS0FBSztnQkFDYSxPQUFPO3NCQUF6QixNQUFNO2dCQUNZLEtBQUs7c0JBQXZCLE1BQU07Z0JBYVAsTUFBTTtzQkFETCxZQUFZO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBIb3N0TGlzdGVuZXIsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zLCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaWxlU2F2ZXJPcHRpb25zIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5pbXBvcnQgeyBGaWxlU2F2ZXJTZXJ2aWNlIH0gZnJvbSAnLi9maWxlc2F2ZXIuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmaWxlU2F2ZXJdJyxcbiAgZXhwb3J0QXM6ICdmaWxlU2F2ZXInLFxuICBzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBGaWxlU2F2ZXJEaXJlY3RpdmUge1xuICBASW5wdXQoKSBtZXRob2QgPSAnR0VUJztcbiAgQElucHV0KCkgaHR0cD86IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEJsb2I+PjtcbiAgQElucHV0KCkgcXVlcnk6IGFueTtcbiAgQElucHV0KCkgaGVhZGVyOiBhbnk7XG4gIEBJbnB1dCgpIHVybCE6IHN0cmluZztcbiAgQElucHV0KCkgZmlsZU5hbWU/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZzT3B0aW9ucz86IEZpbGVTYXZlck9wdGlvbnM7XG4gIEBPdXRwdXQoKSByZWFkb25seSBzdWNjZXNzID0gbmV3IEV2ZW50RW1pdHRlcjxIdHRwUmVzcG9uc2U8QmxvYj4+KCk7XG4gIEBPdXRwdXQoKSByZWFkb25seSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+LCBwcml2YXRlIGZzczogRmlsZVNhdmVyU2VydmljZSwgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgaWYgKCFmc3MuaXNGaWxlU2F2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgIGVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChgZmlsZXNhdmVyX19ub3Qtc3VwcG9ydGApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0TmFtZShyZXM6IEh0dHBSZXNwb25zZTxCbG9iPikge1xuICAgIHJldHVybiBkZWNvZGVVUkkodGhpcy5maWxlTmFtZSB8fCByZXMuaGVhZGVycy5nZXQoJ2ZpbGVuYW1lJykgfHwgcmVzLmhlYWRlcnMuZ2V0KCd4LWZpbGVuYW1lJykgfHwgJycpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBfY2xpY2soKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmZzcy5pc0ZpbGVTYXZlclN1cHBvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcmVxID0gdGhpcy5odHRwO1xuICAgIGlmICghcmVxKSB7XG4gICAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpmb3JpblxuICAgICAgZm9yIChjb25zdCBpdGVtIGluIHF1ZXJ5KSB7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5zZXQoaXRlbSwgcXVlcnlbaXRlbV0pO1xuICAgICAgfVxuXG4gICAgICByZXEgPSB0aGlzLmh0dHBDbGllbnQucmVxdWVzdCh0aGlzLm1ldGhvZCwgdGhpcy51cmwsIHtcbiAgICAgICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYmxvYicsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldERpc2FibGVkKHRydWUpO1xuICAgIHJlcS5zdWJzY3JpYmUoXG4gICAgICAocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDAgfHwgcmVzLmJvZHkhLnNpemUgPD0gMCkge1xuICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChyZXMpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZzcy5zYXZlKHJlcy5ib2R5LCB0aGlzLmdldE5hbWUocmVzKSwgdW5kZWZpbmVkLCB0aGlzLmZzT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHJlcyk7XG4gICAgICB9LFxuICAgICAgKGVycikgPT4gdGhpcy5lcnJvci5lbWl0KGVyciksXG4gICAgICAoKSA9PiB0aGlzLnNldERpc2FibGVkKGZhbHNlKSxcbiAgICApO1xuICB9XG5cbiAgc2V0RGlzYWJsZWQoc3RhdHVzOiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3QgZWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgZWwuZGlzYWJsZWQgPSBzdGF0dXM7XG4gICAgZWwuY2xhc3NMaXN0W3N0YXR1cyA/ICdhZGQnIDogJ3JlbW92ZSddKGBmaWxlc2F2ZXJfX2Rpc2FibGVkYCk7XG4gIH1cbn1cbiJdfQ==