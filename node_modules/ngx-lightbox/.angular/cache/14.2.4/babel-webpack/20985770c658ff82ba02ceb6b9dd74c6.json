{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { ElementRef, Renderer2 } from '@angular/core';\nimport { LIGHTBOX_EVENT, LightboxEvent } from './lightbox-event.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./lightbox-event.service\";\nconst _c0 = [\"lb-overlay\", \"\"];\nexport let LightboxOverlayComponent = /*#__PURE__*/(() => {\n  class LightboxOverlayComponent {\n    constructor(_elemRef, _rendererRef, _lightboxEvent, _documentRef) {\n      this._elemRef = _elemRef;\n      this._rendererRef = _rendererRef;\n      this._lightboxEvent = _lightboxEvent;\n      this._documentRef = _documentRef;\n      this.classList = 'lightboxOverlay animation fadeInOverlay';\n      this._subscription = this._lightboxEvent.lightboxEvent$.subscribe(event => this._onReceivedEvent(event));\n    }\n\n    close() {\n      // broadcast to itself and all others subscriber including the components\n      this._lightboxEvent.broadcastLightboxEvent({\n        id: LIGHTBOX_EVENT.CLOSE,\n        data: null\n      });\n    }\n\n    ngAfterViewInit() {\n      const fadeDuration = this.options.fadeDuration;\n\n      this._rendererRef.setStyle(this._elemRef.nativeElement, '-webkit-animation-duration', `${fadeDuration}s`);\n\n      this._rendererRef.setStyle(this._elemRef.nativeElement, 'animation-duration', `${fadeDuration}s`);\n\n      this._sizeOverlay();\n    }\n\n    onResize() {\n      this._sizeOverlay();\n    }\n\n    ngOnDestroy() {\n      this._subscription.unsubscribe();\n    }\n\n    _sizeOverlay() {\n      const width = this._getOverlayWidth();\n\n      const height = this._getOverlayHeight();\n\n      this._rendererRef.setStyle(this._elemRef.nativeElement, 'width', `${width}px`);\n\n      this._rendererRef.setStyle(this._elemRef.nativeElement, 'height', `${height}px`);\n    }\n\n    _onReceivedEvent(event) {\n      switch (event.id) {\n        case LIGHTBOX_EVENT.CLOSE:\n          this._end();\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    _end() {\n      this.classList = 'lightboxOverlay animation fadeOutOverlay'; // queue self destruction after the animation has finished\n      // FIXME: not sure if there is any way better than this\n\n      setTimeout(() => {\n        this.cmpRef.destroy();\n      }, this.options.fadeDuration * 1000);\n    }\n\n    _getOverlayWidth() {\n      return Math.max(this._documentRef.body.scrollWidth, this._documentRef.body.offsetWidth, this._documentRef.documentElement.clientWidth, this._documentRef.documentElement.scrollWidth, this._documentRef.documentElement.offsetWidth);\n    }\n\n    _getOverlayHeight() {\n      return Math.max(this._documentRef.body.scrollHeight, this._documentRef.body.offsetHeight, this._documentRef.documentElement.clientHeight, this._documentRef.documentElement.scrollHeight, this._documentRef.documentElement.offsetHeight);\n    }\n\n  }\n\n  LightboxOverlayComponent.ɵfac = function LightboxOverlayComponent_Factory(t) {\n    return new (t || LightboxOverlayComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.LightboxEvent), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  LightboxOverlayComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LightboxOverlayComponent,\n    selectors: [[\"\", \"lb-overlay\", \"\"]],\n    hostVars: 2,\n    hostBindings: function LightboxOverlayComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function LightboxOverlayComponent_click_HostBindingHandler() {\n          return ctx.close();\n        })(\"resize\", function LightboxOverlayComponent_resize_HostBindingHandler() {\n          return ctx.onResize();\n        }, false, i0.ɵɵresolveWindow);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.classList);\n      }\n    },\n    inputs: {\n      options: \"options\",\n      cmpRef: \"cmpRef\"\n    },\n    attrs: _c0,\n    decls: 0,\n    vars: 0,\n    template: function LightboxOverlayComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return LightboxOverlayComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}