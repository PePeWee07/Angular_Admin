{"ast":null,"code":"import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector } from '@angular/core';\nimport { LightboxComponent } from './lightbox.component';\nimport { LightboxConfig } from './lightbox-config.service';\nimport { LightboxEvent, LIGHTBOX_EVENT } from './lightbox-event.service';\nimport { LightboxOverlayComponent } from './lightbox-overlay.component';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./lightbox-config.service\";\nimport * as i2 from \"./lightbox-event.service\";\nexport let Lightbox = /*#__PURE__*/(() => {\n  class Lightbox {\n    constructor(_componentFactoryResolver, _injector, _applicationRef, _lightboxConfig, _lightboxEvent, _documentRef) {\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._injector = _injector;\n      this._applicationRef = _applicationRef;\n      this._lightboxConfig = _lightboxConfig;\n      this._lightboxEvent = _lightboxEvent;\n      this._documentRef = _documentRef;\n    }\n\n    open(album, curIndex = 0, options = {}) {\n      const overlayComponentRef = this._createComponent(LightboxOverlayComponent);\n\n      const componentRef = this._createComponent(LightboxComponent);\n\n      const newOptions = {}; // broadcast open event\n\n      this._lightboxEvent.broadcastLightboxEvent({\n        id: LIGHTBOX_EVENT.OPEN\n      });\n\n      Object.assign(newOptions, this._lightboxConfig, options); // attach input to lightbox\n\n      componentRef.instance.album = album;\n      componentRef.instance.currentImageIndex = curIndex;\n      componentRef.instance.options = newOptions;\n      componentRef.instance.cmpRef = componentRef; // attach input to overlay\n\n      overlayComponentRef.instance.options = newOptions;\n      overlayComponentRef.instance.cmpRef = overlayComponentRef; // FIXME: not sure why last event is broadcasted (which is CLOSED) and make\n      // lightbox can not be opened the second time.\n      // Need to timeout so that the OPEN event is set before component is initialized\n\n      setTimeout(() => {\n        this._applicationRef.attachView(overlayComponentRef.hostView);\n\n        this._applicationRef.attachView(componentRef.hostView);\n\n        overlayComponentRef.onDestroy(() => {\n          this._applicationRef.detachView(overlayComponentRef.hostView);\n        });\n        componentRef.onDestroy(() => {\n          this._applicationRef.detachView(componentRef.hostView);\n        });\n        const containerElement = newOptions.containerElementResolver(this._documentRef);\n        containerElement.appendChild(overlayComponentRef.location.nativeElement);\n        containerElement.appendChild(componentRef.location.nativeElement);\n      });\n    }\n\n    close() {\n      if (this._lightboxEvent) {\n        this._lightboxEvent.broadcastLightboxEvent({\n          id: LIGHTBOX_EVENT.CLOSE\n        });\n      }\n    }\n\n    _createComponent(ComponentClass) {\n      const factory = this._componentFactoryResolver.resolveComponentFactory(ComponentClass);\n\n      const component = factory.create(this._injector);\n      return component;\n    }\n\n  }\n\n  Lightbox.ɵfac = function Lightbox_Factory(t) {\n    return new (t || Lightbox)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i1.LightboxConfig), i0.ɵɵinject(i2.LightboxEvent), i0.ɵɵinject(DOCUMENT));\n  };\n\n  Lightbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Lightbox,\n    factory: Lightbox.ɵfac\n  });\n  return Lightbox;\n})();","map":null,"metadata":{},"sourceType":"module"}